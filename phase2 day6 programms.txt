graph = 1
'5' : ['3','7'], '3': ['2', '4'],
,['ם'] : ידי
'2': [],
'8': []

#BTS- we use queue 
visited = []
queue=[]

der bfs (visited, graph, node):
    visited.append(node)
    queue.append (node)

    while queue:
    m=queue.pop (0)
    print (m, end = " ")

    for neighbour in graph [m]: 
       ir neighbour not in visited:
         visited.append(neighbour)
         queue.append (neighbour)
bfs (visited, graph, 5')



class graph (object):

#intialize the matrix
  def __init_(self, size): 
  self.adjmatrix = []
  for i in range (size):
    self.adjmatrix.append(10 for i in range (size)])
self.size = size

#add edges
def add_edge(self,vi, v2): 
if v1 == v2:
   print ("same vertex %d and %d" % (v1, v2))
self.adjmatrix[v1] [v2] = 1 
self.adjmatrix[v2] [vi] = 1

#remove edges
def remove edge (self, v1, v2):
 if self.adjmatrix [vi] [v2] 0:
   print ("no edge between %d and %d" % (v1, v2))
   return
self.adjmatrix[vi] [v2] = 0 
self.adjmatrix [v2] [vi] = 0
def_len_(self):
   return self.size

#print the matrix 
def print matrix (self): 
    for row in self.adjmatrix:
       for val in row:
           print((:4).format (val))

def main(): 
g=graph (5)
g.add edge (0, 1)
g.add edge (0, 2)
g.add edge (1, 2)
g.add edge (2, 0)
g.add_edge (2, 3)
g.print matrix()
if __name__=='__main__':
    main()



#import dictionary for graph
from collections import defaultdict

#ADD EDGE TO GRAPH: FUNCTION
graph = defaultdict(list)
def addedge (graph, u, v):
    graph [u].append(v)

#function description 
def generate edges (graph):
     edges = []

#for each node in graph 
for node in graph:

    for neighbour in graph [node]:
     #if edge exists then append
     edges.append ((node, neigbour)) 
     return edges

#DECLARING - graph as dictionary
addedge (graph, 'a', 'c')
addedge (graph, 'b', 'c')
addedge (graph, 'b', 'e') 
addedge (graph, 'c', 'd')
addedge (graph, 'c', 'e')
addedge (graph, 'c', 'a')
addedge (graph, 'c', 'b') 
addedge (graph, 'e', 'b')
addedge (graph, 'd', 'c')


DELETION OF NODE IN BST: 
Class Node:
def __init (self, key):
    self.left=None 
    self.right=None
    delf.key=key
def Inorder (root):
   If root:
      Inorder (root.left)
      print (root.key, end-"") 
      Inorder (root.right)
der insert (node, key): 
    #if the tree is empty, return a new node
    If root is None:
      return Node (key) 
    #otherwise recur down the tree
if key < node.key:
   root.left-insert (root.left, key)
else:
   root.right-insert (root.right, key)
return root
#given a non-empty binary
#search tree, return the node 
#found in that tree.note that the entire tree does not need to be searched
def minvaluenode (node):
   current=node
#loop down to find the leftmost lear
while (current.left is not None):
 current-current.left
return current
#given a binary search tree and a key, this function
#delete the key and returns the new root
def deletenode (root, key):
#base case 
if root is None:
return root
if key < root.key:
root.left=deleteNode (root.left, key)
elif(key > root.key):
root.right=deleteNode(root.right,key)

#if keyis same as root's key, then this is 
#to be delected
else:
   #node with only one child or no child
  if root.left is None:
    temp-root.right root-None
    return temp 
elif root.right is None:
temp-root.right 
root-None
return temp
#node with 2 child
#get inorder successor
#(smallest in the right subtree)
temp=minvaluenode (root.right)
#copy inorder successor's
#content to this node
root.key=temp.key
#delete the inorder successor
root.right-deletenode (root.right, temp.key)
 return root
"""let us crete following BST
   50
 /   \
30    70
/  \  /  \
20  40  60  80  " " "

root-None
root-insort (root, 50)
root-insert (root, 30)
root-insert (root, 70)
root-insert (root, 20)
root-insert (root, 40)
root-insert (root, 60)
root-insert (root, 80)
print ("inorder traversal of the given tree")
inorder (root)
print ("\nDelete 20")
root-deleteNode (root, 20)
print ("inorder traversal of the modified tree")
inorder(root)
print("\nDelete 30")
root-deleteNode (root, 30)
print("inorder traversal of the modified tree")
inorder(root)
print ("\nDelete 50") 
root=deleteNode (root, 50)
print("inorder traversal of the modified tree")
inorder (root)