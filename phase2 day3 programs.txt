class node:
    def __init__(self,data):
        self.data=data
         self.next=None
#program to create a linked list in ascending order and delete function

        
class LinkedList:
    def __init__(self):
        self.head=None
        
    def display(self):
        temp=self.head
        if not temp:
            print("List is empty")
            return
        else:
            print("Start",end=' ')
        while temp:
            print(temp.data,end='-->')
            temp=temp.next
        print('end.')
        
    def insert(self,data):
        new_node=node(data)
            #if the linked list is empty
        if self.head is None:
            self.head=new_node
            #if the data is samller than head
        elif self.head.data>=new_node.data:
            new_node.next=self.head
            self.head=new_node
        else:
             #Locate the node before insertion
            current=self.head
            while current.next and new_node.data>current.next.data:
                current=current.next
                #insertion
            new_node.next=current.next
            current.next=new_node
            
    def delete(self,key):
            #if the list is empty
        if self.head is None:
            print("Deletion ErrorLThe list is empty")
            return
            #if the key is in head
        if self.head.data==key:
            self.head=self.head.next
            return
            #find position of first occurence of the
        current=self.head
        while current:
            if current.data==key:
                break
            previous=current
            current=current.next
            #if the key was not found
        if current is None:
            print("DeletionError:Key not founf")
        else:
            previous.next=current.next

            
#__name is python special variable
if __name__=='__main__':
    #create and object
    LL=LinkedList()
    print(' ')
    #insert some node
    LL.insert(10)
    LL.insert(12)
    LL.insert(8)
    LL.insert(11)
    LL.insert(10)

    LL.display()
    LL.delete(12)
    LL.delete(8)
    LL.delete(10)
    LL.display()

#CREATE NODE
class Node:
    def __init__(self,data):
        self.data=data
        self.previous=None
        self.next=None


class dll:
    def __init__(self):
        self.head=None

    def display(self):
        if self.head is None:
            print("Empty")
        else:
            temp=self.head
            while temp:
                print(temp.data,"<-->",end=" ")
                temp=temp.next

l=dll()
n1=Node(100)
lhead=n1
n2=Node(200)
n2.prev=n1
n1.next=n2
l.display()
OUTPUT:
100<-->200<-->

#insert_start
class Node:
    def __init__(self,data):
        self.data=data
        self.previous=None
        self.next=None


class dll:
    def __init__(self):
        self.head=None


    def insert_start(self):

        n=Node(300)
        temp=self.head
        temp.prev=n
        n.next=temp
        self.head=n

    def display(self):
        if self.head is None:
            print("Empty")
        else:
            temp=self.head
            while temp:
                print(temp.data,"<-->",end=" ")
                temp=temp.next

l=dll()
n1=Node(100)
l.head=n1
n2=Node(200)
n2.prev=n1
n1.next=n2
l.insert_start()
l.display()
output:
300 <--> 100 <--> 200 <--> 


#insert_end
class Node:
    def __init__(self,data):
        self.data=data
        self.previous=None
        self.next=None


class dll:
    def __init__(self):
        self.head=None


    def insert_end(self):

        n=Node(300)
        temp=self.head
        while temp.next is not None:
            temp=temp.next
        temp.next=n
        n.prev=temp
        

    def display(self):
        if self.head is None:
            print("Empty")
        else:
            temp=self.head
            while temp:
                print(temp.data,"<-->",end=" ")
                temp=temp.next

l=dll()
n1=Node(100)
l.head=n1
n2=Node(200)
n2.prev=n1
n1.next=n2
l.insert_end()
l.display()
output:
100 <--> 200 <--> 300 <--> 

#insert_position
class Node:
    def __init__(self,data):
        self.data=data
        self.previous=None
        self.next=None


class dll:
    def __init__(self):
        self.head=None


    def insert_pos(self,pos):
        n=Node(300)
        temp=self.head
        for i in range(1,pos-1):
            temp=temp.next
        n.prev=temp
        n.next=temp.next
        temp.next.prev=n
        temp.next=n
        

    def display(self):
        if self.head is None:
            print("Empty")
        else:
            temp=self.head
            while temp:
                print(temp.data,"<-->",end=" ")
                temp=temp.next

l=dll()
n1=Node(100)
l.head=n1
n2=Node(200)
n2.prev=n1
n1.next=n2
l.insert_pos(2)
l.display()
output:
100 <--> 300 <--> 200 <-->

####Deleting at the beginning in double linked list

class Node:
    def _init_(self,data):
        self.data=data
        self.previous=None
        self.next=None

class dll:
    def _init_(self):
        self.head=None

    def delete_beginning(self):
        temp=self.head
        self.head=temp.next
        temp.next=None
        
    def display(self):
        if self.head is None:
            print("Empty")
        else:
            temp=self.head
            while temp:
                print(temp.data,"<-->",end=" ")
                temp=temp.next


l=dll()
n1=Node(100)
l.head=n1
n2=Node(200)
n2.prev=n1
n1.next=n2
n3=Node(300)
n3.prev=n2
n2.next=n3
l.delete_beginning()
l.display()

###Deleting at the end in double linked list

class Node:
    def _init_(self,data):
        self.data=data
        self.previous=None
        self.next=None

class dll:
    def _init_(self):
        self.head=None

    def delete_end(self):
        temp=self.head.next
        prev=self.head
        while temp.next is not None:
            temp=temp.next
            prev=prev.next
        prev.next=None
         
    def display(self):
        if self.head is None:
            print("Empty")
        else:
            temp=self.head
            while temp:
                print(temp.data,"<-->",end=" ")
                temp=temp.next


l=dll()
n1=Node(100)
l.head=n1
n2=Node(200)
n2.prev=n1
n1.next=n2
n3=Node(300)
n3.prev=n2
n2.next=n3
l.delete_end()
l.display()

#Deleting at a position in double linked list
class Node:
    def _init_(self,data):
        self.data=data
        self.previous=None
        self.next=None

class dll:
    def _init_(self):
        self.head=None

    def delete_position(self,pos):
        temp=self.head.next
        prev=self.head
        for i in range(1,pos-1):
           temp=temp.next
           prev=prev.next
        prev.next=temp.next
        temp.next=None
       
         
    def display(self):
        if self.head is None:
            print("Empty")
        else:
            temp=self.head
            while temp:
                print(temp.data,"<-->",end=" ")
                temp=temp.next


l=dll()
n1=Node(100)
l.head=n1
n2=Node(200)
n2.prev=n1
n1.next=n2
n3=Node(300)
n3.prev=n2
n2.next=n3
l.delete_position(2)
l.display()


###let say u have a lot of functions in your project
#u can give all definitions at one place
#and give all function calls inside main\
#easy to read.especially for others
#those who are seeing your program
print("before function")
def f1():
    print("f1")
def f2():
    print("f2")
def f3():
    print("f3")
if _name=="main_":
    f1()
    f2()
    f3()
print("name",_name_)

